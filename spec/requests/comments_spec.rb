# frozen_string_literal: true

require 'rails_helper'

# This spec was generated by rspec-rails when you ran the scaffold generator.
# It demonstrates how one might use RSpec to test the controller code that
# was generated by Rails when you ran the scaffold generator.
#
# It assumes that the implementation code is generated by the rails scaffold
# generator. If you are using any extension libraries to generate different
# controller code, this generated spec may or may not pass.
#
# It only uses APIs available in rails and/or rspec-rails. There are a number
# of tools you can use to make these specs even more expressive, but we're
# sticking to rails and rspec-rails APIs to keep things simple and stable.

RSpec.describe '/comments', type: :request do
  let(:poster) { create(:user) }
  let(:commenter) { create(:user) }
  let(:new_post) { create(:post, user: poster) }
  # This should return the minimal set of attributes required to create a valid
  # Comment. As you add validations to Comment, be sure to
  # adjust the attributes here as well.
  let(:valid_attributes) do
    {
      message: 'This is a test comment',
      post_id: new_post.id,
      user_id: commenter.id
    }
  end

  let(:invalid_attributes) do
    {
      message: nil,
      post_id: nil
    }
  end

  before do
    sign_in commenter
  end

  describe 'POST /create' do
    context 'with valid parameters' do
      it 'creates a new Comment' do
        expect do
          post comments_url, params: { comment: valid_attributes }
        end.to change(Comment, :count).by(1)
      end

      it 'redirects to the posts page' do
        post comments_url, params: { comment: valid_attributes }
        expect(response).to redirect_to(posts_url)
      end
    end

    context 'with invalid parameters' do
      it 'does not create a new Comment' do
        expect do
          post comments_url, params: { comment: invalid_attributes }
        end.not_to change(Comment, :count)
      end

      it 'renders a response with 302 status' do
        post comments_url, params: { comment: invalid_attributes }
        expect(response).to have_http_status(:found)
      end
    end
  end

  describe 'DELETE /destroy' do
    it 'destroys the requested comment' do
      comment = Comment.create! valid_attributes
      expect do
        delete comment_url(comment)
      end.to change(Comment, :count).by(-1)
    end

    it 'redirects to the comments list' do
      comment = Comment.create! valid_attributes
      delete comment_url(comment)
      expect(response).to redirect_to(posts_url)
    end
  end
end
