# frozen_string_literal: true

require 'rails_helper'

# This spec was generated by rspec-rails when you ran the scaffold generator.
# It demonstrates how one might use RSpec to test the controller code that
# was generated by Rails when you ran the scaffold generator.
#
# It assumes that the implementation code is generated by the rails scaffold
# generator. If you are using any extension libraries to generate different
# controller code, this generated spec may or may not pass.
#
# It only uses APIs available in rails and/or rspec-rails. There are a number
# of tools you can use to make these specs even more expressive, but we're
# sticking to rails and rspec-rails APIs to keep things simple and stable.

RSpec.describe '/documents', type: :request do
  let(:user) { create(:user, admin: true) }
  # This should return the minimal set of attributes required to create a valid
  # Document. As you add validations to Document, be sure to
  # adjust the attributes here as well.
  let(:valid_attributes) do
    {
      file: Rack::Test::UploadedFile.new(Rails.root.join('spec/fixtures/test_document_1.pdf'),
                                         'application/pdf')
    }
  end

  let(:invalid_attributes) do
    {
      file: nil
    }
  end

  before do
    sign_in user
  end

  describe 'GET /index' do
    it 'renders a successful response' do
      Document.create! valid_attributes
      get documents_url
      expect(response).to be_successful
    end
  end

  describe 'GET /download' do
    it 'downloads the requested document' do
      document = Document.create! valid_attributes
      get download_document_url(document)
      expect(response).to be_successful
      expect(response.header['Content-Disposition']).to include("attachment; filename=\"#{document.file.filename}\"")
    end
  end

  describe 'POST /create' do
    context 'with valid parameters' do
      it 'creates a new Document' do
        expect do
          post documents_url, params: { document: valid_attributes }
        end.to change(Document, :count).by(1)
      end

      it 'redirects to the created document' do
        post documents_url, params: { document: valid_attributes }
        expect(response).to redirect_to(document_url(Document.last))
      end
    end

    context 'with invalid parameters' do
      it 'does not create a new Document' do
        expect do
          post documents_url, params: { document: invalid_attributes }
        end.not_to change(Document, :count)
      end

      it "renders a response with 422 status (i.e. to display the 'new' template)" do
        post documents_url, params: { document: invalid_attributes }
        expect(response).to have_http_status(:unprocessable_entity)
      end
    end
  end

  describe 'DELETE /destroy' do
    it 'destroys the requested document' do
      document = Document.create! valid_attributes
      expect do
        delete document_url(document)
      end.to change(Document, :count).by(-1)
    end

    it 'redirects to the documents list' do
      document = Document.create! valid_attributes
      delete document_url(document)
      expect(response).to redirect_to(documents_url)
    end
  end
end
